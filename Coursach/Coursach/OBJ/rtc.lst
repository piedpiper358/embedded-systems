                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                              4 ; This file was generated Thu Jan 24 01:04:32 2019
                              5 ;--------------------------------------------------------
                              6 	.module rtc
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _GetTime
                             13 	.globl _SetTime
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (DATA)
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (DATA)
                             22 ;--------------------------------------------------------
                             23 ; overlayable register banks
                             24 ;--------------------------------------------------------
                             25 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      26 	.ds 8
                             27 ;--------------------------------------------------------
                             28 ; overlayable bit register bank
                             29 ;--------------------------------------------------------
                             30 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      31 bits:
   0000                      32 	.ds 1
                    8000     33 	b0 = bits[0]
                    8100     34 	b1 = bits[1]
                    8200     35 	b2 = bits[2]
                    8300     36 	b3 = bits[3]
                    8400     37 	b4 = bits[4]
                    8500     38 	b5 = bits[5]
                    8600     39 	b6 = bits[6]
                    8700     40 	b7 = bits[7]
                             41 ;--------------------------------------------------------
                             42 ; internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area DSEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; overlayable items in internal ram 
                             47 ;--------------------------------------------------------
                             48 	.area OSEG    (OVR,DATA)
                             49 ;--------------------------------------------------------
                             50 ; indirectly addressable internal ram data
                             51 ;--------------------------------------------------------
                             52 	.area ISEG    (DATA)
                             53 ;--------------------------------------------------------
                             54 ; absolute internal ram data
                             55 ;--------------------------------------------------------
                             56 	.area IABS    (ABS,DATA)
                             57 	.area IABS    (ABS,DATA)
                             58 ;--------------------------------------------------------
                             59 ; bit data
                             60 ;--------------------------------------------------------
                             61 	.area BSEG    (BIT)
                             62 ;--------------------------------------------------------
                             63 ; paged external ram data
                             64 ;--------------------------------------------------------
                             65 	.area PSEG    (PAG,XDATA)
                             66 ;--------------------------------------------------------
                             67 ; external ram data
                             68 ;--------------------------------------------------------
                             69 	.area XSEG    (XDATA)
                             70 ;--------------------------------------------------------
                             71 ; absolute external ram data
                             72 ;--------------------------------------------------------
                             73 	.area XABS    (ABS,XDATA)
                             74 ;--------------------------------------------------------
                             75 ; external initialized ram data
                             76 ;--------------------------------------------------------
                             77 	.area XISEG   (XDATA)
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT0 (CODE)
                             80 	.area GSINIT1 (CODE)
                             81 	.area GSINIT2 (CODE)
                             82 	.area GSINIT3 (CODE)
                             83 	.area GSINIT4 (CODE)
                             84 	.area GSINIT5 (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area CSEG    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; global & static initialisations
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area GSINIT  (CODE)
                             93 	.area GSFINAL (CODE)
                             94 	.area GSINIT  (CODE)
                             95 ;--------------------------------------------------------
                             96 ; Home
                             97 ;--------------------------------------------------------
                             98 	.area HOME    (CODE)
                             99 	.area HOME    (CODE)
                            100 ;--------------------------------------------------------
                            101 ; code
                            102 ;--------------------------------------------------------
                            103 	.area CSEG    (CODE)
                            104 ;------------------------------------------------------------
                            105 ;Allocation info for local variables in function 'GetTime'
                            106 ;------------------------------------------------------------
                            107 ;time                      Allocated to registers r2 r3 
                            108 ;h                         Allocated to registers r5 
                            109 ;------------------------------------------------------------
                            110 ;	SRC/rtc.c:79: unsigned char /*bit*/ GetTime(TIME xdata * time)
                            111 ;	-----------------------------------------
                            112 ;	 function GetTime
                            113 ;	-----------------------------------------
   0000                     114 _GetTime:
                    0002    115 	ar2 = 0x02
                    0003    116 	ar3 = 0x03
                    0004    117 	ar4 = 0x04
                    0005    118 	ar5 = 0x05
                    0006    119 	ar6 = 0x06
                    0007    120 	ar7 = 0x07
                    0000    121 	ar0 = 0x00
                    0001    122 	ar1 = 0x01
   0000 AA 82               123 	mov	r2,dpl
   0002 AB 83               124 	mov	r3,dph
                            125 ;	SRC/rtc.c:83: if( !GetAck(RTC_ADDRESS) )
   0004 75 82 A0            126 	mov	dpl,#0xA0
   0007 C0 02               127 	push	ar2
   0009 C0 03               128 	push	ar3
   000B 12s00r00            129 	lcall	_GetAck
   000E D0 03               130 	pop	ar3
   0010 D0 02               131 	pop	ar2
   0012 40 04               132 	jc	00102$
                            133 ;	SRC/rtc.c:84: return 1; //RTC failed to respond
   0014 75 82 01            134 	mov	dpl,#0x01
   0017 22                  135 	ret
   0018                     136 00102$:
                            137 ;	SRC/rtc.c:86: if( ReceiveBlock(RTC_ADDRESS, 1, (unsigned char xdata*)time, 4) )
   0018 C0 02               138 	push	ar2
   001A C0 03               139 	push	ar3
   001C 74 04               140 	mov	a,#0x04
   001E C0 E0               141 	push	acc
   0020 C0 02               142 	push	ar2
   0022 C0 03               143 	push	ar3
   0024 74 01               144 	mov	a,#0x01
   0026 C0 E0               145 	push	acc
   0028 75 82 A0            146 	mov	dpl,#0xA0
   002B 12s00r00            147 	lcall	_ReceiveBlock
   002E 92 D5               148 	mov	F0,c
   0030 E5 81               149 	mov	a,sp
   0032 24 FC               150 	add	a,#0xfc
   0034 F5 81               151 	mov	sp,a
   0036 D0 03               152 	pop	ar3
   0038 D0 02               153 	pop	ar2
   003A A2 D5               154 	mov	c,F0
   003C 92*00               155 	mov	b0,c
   003E 50 04               156 	jnc	00104$
                            157 ;	SRC/rtc.c:87: return 1; //Error reading
   0040 75 82 01            158 	mov	dpl,#0x01
   0043 22                  159 	ret
   0044                     160 00104$:
                            161 ;	SRC/rtc.c:89: time->hsec = BCD2Bin(time->hsec);
   0044 8A 82               162 	mov	dpl,r2
   0046 8B 83               163 	mov	dph,r3
   0048 E0                  164 	movx	a,@dptr
   0049 FC                  165 	mov	r4,a
   004A 74 0F               166 	mov	a,#0x0F
   004C 5C                  167 	anl	a,r4
   004D FD                  168 	mov	r5,a
   004E 53 04 F0            169 	anl	ar4,#0xF0
   0051 EC                  170 	mov	a,r4
   0052 C4                  171 	swap	a
   0053 54 0F               172 	anl	a,#0x0f
   0055 75 F0 0A            173 	mov	b,#0x0A
   0058 A4                  174 	mul	ab
   0059 2D                  175 	add	a,r5
   005A 8A 82               176 	mov	dpl,r2
   005C 8B 83               177 	mov	dph,r3
   005E F0                  178 	movx	@dptr,a
                            179 ;	SRC/rtc.c:90: time->sec  = BCD2Bin(time->sec);
   005F 74 01               180 	mov	a,#0x01
   0061 2A                  181 	add	a,r2
   0062 FC                  182 	mov	r4,a
   0063 E4                  183 	clr	a
   0064 3B                  184 	addc	a,r3
   0065 FD                  185 	mov	r5,a
   0066 8C 82               186 	mov	dpl,r4
   0068 8D 83               187 	mov	dph,r5
   006A E0                  188 	movx	a,@dptr
   006B FE                  189 	mov	r6,a
   006C 74 0F               190 	mov	a,#0x0F
   006E 5E                  191 	anl	a,r6
   006F FF                  192 	mov	r7,a
   0070 53 06 F0            193 	anl	ar6,#0xF0
   0073 EE                  194 	mov	a,r6
   0074 C4                  195 	swap	a
   0075 54 0F               196 	anl	a,#0x0f
   0077 75 F0 0A            197 	mov	b,#0x0A
   007A A4                  198 	mul	ab
   007B 2F                  199 	add	a,r7
   007C 8C 82               200 	mov	dpl,r4
   007E 8D 83               201 	mov	dph,r5
   0080 F0                  202 	movx	@dptr,a
                            203 ;	SRC/rtc.c:91: time->min  = BCD2Bin(time->min);
   0081 74 02               204 	mov	a,#0x02
   0083 2A                  205 	add	a,r2
   0084 FC                  206 	mov	r4,a
   0085 E4                  207 	clr	a
   0086 3B                  208 	addc	a,r3
   0087 FD                  209 	mov	r5,a
   0088 8C 82               210 	mov	dpl,r4
   008A 8D 83               211 	mov	dph,r5
   008C E0                  212 	movx	a,@dptr
   008D FE                  213 	mov	r6,a
   008E 74 0F               214 	mov	a,#0x0F
   0090 5E                  215 	anl	a,r6
   0091 FF                  216 	mov	r7,a
   0092 53 06 F0            217 	anl	ar6,#0xF0
   0095 EE                  218 	mov	a,r6
   0096 C4                  219 	swap	a
   0097 54 0F               220 	anl	a,#0x0f
   0099 75 F0 0A            221 	mov	b,#0x0A
   009C A4                  222 	mul	ab
   009D 2F                  223 	add	a,r7
   009E FF                  224 	mov	r7,a
   009F 8C 82               225 	mov	dpl,r4
   00A1 8D 83               226 	mov	dph,r5
   00A3 F0                  227 	movx	@dptr,a
                            228 ;	SRC/rtc.c:92: h          = BCD2Bin(time->hour & 0x3F);
   00A4 74 03               229 	mov	a,#0x03
   00A6 2A                  230 	add	a,r2
   00A7 FA                  231 	mov	r2,a
   00A8 E4                  232 	clr	a
   00A9 3B                  233 	addc	a,r3
   00AA FB                  234 	mov	r3,a
   00AB 8A 82               235 	mov	dpl,r2
   00AD 8B 83               236 	mov	dph,r3
   00AF E0                  237 	movx	a,@dptr
   00B0 FC                  238 	mov	r4,a
   00B1 74 0F               239 	mov	a,#0x0F
   00B3 5C                  240 	anl	a,r4
   00B4 FD                  241 	mov	r5,a
   00B5 74 30               242 	mov	a,#0x30
   00B7 5C                  243 	anl	a,r4
   00B8 C4                  244 	swap	a
   00B9 54 0F               245 	anl	a,#0x0f
   00BB 75 F0 0A            246 	mov	b,#0x0A
   00BE A4                  247 	mul	ab
   00BF FE                  248 	mov	r6,a
   00C0 2D                  249 	add	a,r5
   00C1 FD                  250 	mov	r5,a
                            251 ;	SRC/rtc.c:94: if( time->hour & 0xC0 ) //12h format and pm time
   00C2 EC                  252 	mov	a,r4
   00C3 54 C0               253 	anl	a,#0xC0
   00C5 60 18               254 	jz	00109$
                            255 ;	SRC/rtc.c:96: if(time->hour < 12)
   00C7 BC 0C 00            256 	cjne	r4,#0x0C,00120$
   00CA                     257 00120$:
   00CA 50 0B               258 	jnc	00106$
                            259 ;	SRC/rtc.c:97: time->hour = h + 12;
   00CC 74 0C               260 	mov	a,#0x0C
   00CE 2D                  261 	add	a,r5
   00CF FC                  262 	mov	r4,a
   00D0 8A 82               263 	mov	dpl,r2
   00D2 8B 83               264 	mov	dph,r3
   00D4 F0                  265 	movx	@dptr,a
   00D5 80 0E               266 	sjmp	00110$
   00D7                     267 00106$:
                            268 ;	SRC/rtc.c:99: time->hour = 0;
   00D7 8A 82               269 	mov	dpl,r2
   00D9 8B 83               270 	mov	dph,r3
   00DB E4                  271 	clr	a
   00DC F0                  272 	movx	@dptr,a
   00DD 80 06               273 	sjmp	00110$
   00DF                     274 00109$:
                            275 ;	SRC/rtc.c:102: time->hour = h;
   00DF 8A 82               276 	mov	dpl,r2
   00E1 8B 83               277 	mov	dph,r3
   00E3 ED                  278 	mov	a,r5
   00E4 F0                  279 	movx	@dptr,a
   00E5                     280 00110$:
                            281 ;	SRC/rtc.c:104: return 0;
   00E5 75 82 00            282 	mov	dpl,#0x00
   00E8 22                  283 	ret
                            284 ;------------------------------------------------------------
                            285 ;Allocation info for local variables in function 'SetTime'
                            286 ;------------------------------------------------------------
                            287 ;time                      Allocated to registers r2 r3 
                            288 ;h                         Allocated to stack - offset 3
                            289 ;t                         Allocated to stack - offset 1
                            290 ;------------------------------------------------------------
                            291 ;	SRC/rtc.c:120: unsigned char /*bit*/ SetTime(TIME xdata * time)
                            292 ;	-----------------------------------------
                            293 ;	 function SetTime
                            294 ;	-----------------------------------------
   00E9                     295 _SetTime:
   00E9 C0*00               296 	push	_bp
   00EB E5 81               297 	mov	a,sp
   00ED F5*00               298 	mov	_bp,a
   00EF 24 04               299 	add	a,#0x04
   00F1 F5 81               300 	mov	sp,a
   00F3 AA 82               301 	mov	r2,dpl
   00F5 AB 83               302 	mov	r3,dph
                            303 ;	SRC/rtc.c:125: if( !GetAck(RTC_ADDRESS) )
   00F7 75 82 A0            304 	mov	dpl,#0xA0
   00FA C0 02               305 	push	ar2
   00FC C0 03               306 	push	ar3
   00FE 12s00r00            307 	lcall	_GetAck
   0101 D0 03               308 	pop	ar3
   0103 D0 02               309 	pop	ar2
   0105 40 06               310 	jc	00102$
                            311 ;	SRC/rtc.c:126: return 1; //RTC failed to respond
   0107 75 82 01            312 	mov	dpl,#0x01
   010A 02s01rAA            313 	ljmp	00105$
   010D                     314 00102$:
                            315 ;	SRC/rtc.c:128: t.hsec = Bin2BCD(time->hsec);
   010D A8*00               316 	mov	r0,_bp
   010F 08                  317 	inc	r0
   0110 8A 82               318 	mov	dpl,r2
   0112 8B 83               319 	mov	dph,r3
   0114 E0                  320 	movx	a,@dptr
   0115 FC                  321 	mov	r4,a
   0116 75 F0 0A            322 	mov	b,#0x0A
   0119 84                  323 	div	ab
   011A AD F0               324 	mov	r5,b
   011C 75 F0 0A            325 	mov	b,#0x0A
   011F EC                  326 	mov	a,r4
   0120 84                  327 	div	ab
   0121 C4                  328 	swap	a
   0122 54 F0               329 	anl	a,#0xf0
   0124 2D                  330 	add	a,r5
   0125 F6                  331 	mov	@r0,a
                            332 ;	SRC/rtc.c:129: t.sec  = Bin2BCD(time->sec);
   0126 AC*00               333 	mov	r4,_bp
   0128 0C                  334 	inc	r4
   0129 EC                  335 	mov	a,r4
   012A 04                  336 	inc	a
   012B F8                  337 	mov	r0,a
   012C 8A 82               338 	mov	dpl,r2
   012E 8B 83               339 	mov	dph,r3
   0130 A3                  340 	inc	dptr
   0131 E0                  341 	movx	a,@dptr
   0132 FD                  342 	mov	r5,a
   0133 75 F0 0A            343 	mov	b,#0x0A
   0136 84                  344 	div	ab
   0137 AE F0               345 	mov	r6,b
   0139 75 F0 0A            346 	mov	b,#0x0A
   013C ED                  347 	mov	a,r5
   013D 84                  348 	div	ab
   013E C4                  349 	swap	a
   013F 54 F0               350 	anl	a,#0xf0
   0141 2E                  351 	add	a,r6
   0142 F6                  352 	mov	@r0,a
                            353 ;	SRC/rtc.c:130: t.min  = Bin2BCD(time->min);
   0143 74 02               354 	mov	a,#0x02
   0145 2C                  355 	add	a,r4
   0146 F8                  356 	mov	r0,a
   0147 8A 82               357 	mov	dpl,r2
   0149 8B 83               358 	mov	dph,r3
   014B A3                  359 	inc	dptr
   014C A3                  360 	inc	dptr
   014D E0                  361 	movx	a,@dptr
   014E FD                  362 	mov	r5,a
   014F 75 F0 0A            363 	mov	b,#0x0A
   0152 84                  364 	div	ab
   0153 AE F0               365 	mov	r6,b
   0155 75 F0 0A            366 	mov	b,#0x0A
   0158 ED                  367 	mov	a,r5
   0159 84                  368 	div	ab
   015A C4                  369 	swap	a
   015B 54 F0               370 	anl	a,#0xf0
   015D 2E                  371 	add	a,r6
   015E F6                  372 	mov	@r0,a
                            373 ;	SRC/rtc.c:131: t.hour = Bin2BCD(time->hour & 0x3F);
   015F 74 03               374 	mov	a,#0x03
   0161 2C                  375 	add	a,r4
   0162 F8                  376 	mov	r0,a
   0163 8A 82               377 	mov	dpl,r2
   0165 8B 83               378 	mov	dph,r3
   0167 A3                  379 	inc	dptr
   0168 A3                  380 	inc	dptr
   0169 A3                  381 	inc	dptr
   016A E0                  382 	movx	a,@dptr
   016B FA                  383 	mov	r2,a
   016C 53 02 3F            384 	anl	ar2,#0x3F
   016F 75 F0 0A            385 	mov	b,#0x0A
   0172 EA                  386 	mov	a,r2
   0173 84                  387 	div	ab
   0174 AB F0               388 	mov	r3,b
   0176 75 F0 0A            389 	mov	b,#0x0A
   0179 EA                  390 	mov	a,r2
   017A 84                  391 	div	ab
   017B C4                  392 	swap	a
   017C 54 F0               393 	anl	a,#0xf0
   017E 2B                  394 	add	a,r3
   017F F6                  395 	mov	@r0,a
                            396 ;	SRC/rtc.c:133: if( TransmitBlock(RTC_ADDRESS, 1, (unsigned char xdata*)&t, 4) )
   0180 7A 00               397 	mov	r2,#0x00
   0182 74 04               398 	mov	a,#0x04
   0184 C0 E0               399 	push	acc
   0186 C0 04               400 	push	ar4
   0188 C0 02               401 	push	ar2
   018A 74 01               402 	mov	a,#0x01
   018C C0 E0               403 	push	acc
   018E 75 82 A0            404 	mov	dpl,#0xA0
   0191 12s00r00            405 	lcall	_TransmitBlock
   0194 92 D5               406 	mov	F0,c
   0196 E5 81               407 	mov	a,sp
   0198 24 FC               408 	add	a,#0xfc
   019A F5 81               409 	mov	sp,a
   019C A2 D5               410 	mov	c,F0
   019E 92*00               411 	mov	b0,c
   01A0 50 05               412 	jnc	00104$
                            413 ;	SRC/rtc.c:134: return 1; //Error reading
   01A2 75 82 01            414 	mov	dpl,#0x01
   01A5 80 03               415 	sjmp	00105$
   01A7                     416 00104$:
                            417 ;	SRC/rtc.c:136: return 0;
   01A7 75 82 00            418 	mov	dpl,#0x00
   01AA                     419 00105$:
   01AA 85*00 81            420 	mov	sp,_bp
   01AD D0*00               421 	pop	_bp
   01AF 22                  422 	ret
                            423 	.area CSEG    (CODE)
                            424 	.area CONST   (CODE)
                            425 	.area XINIT   (CODE)
                            426 	.area CABS    (ABS,CODE)
