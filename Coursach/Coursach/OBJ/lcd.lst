                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                              4 ; This file was generated Thu Jan 24 15:49:36 2019
                              5 ;--------------------------------------------------------
                              6 	.module lcd
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Strobe
                             13 	.globl _SwitchCurPosControl
                             14 	.globl _LCD_SwitchCursor
                             15 	.globl _LCD_Clear
                             16 	.globl _InitLCD
                             17 	.globl _LCD_Putch
                             18 	.globl _LCD_GotoXY
                             19 	.globl _LCD_Type
                             20 	.globl _LCD_GetX
                             21 	.globl _LCD_GetY
                             22 ;--------------------------------------------------------
                             23 ; special function registers
                             24 ;--------------------------------------------------------
                             25 	.area RSEG    (DATA)
                             26 ;--------------------------------------------------------
                             27 ; special function bits
                             28 ;--------------------------------------------------------
                             29 	.area RSEG    (DATA)
                             30 ;--------------------------------------------------------
                             31 ; overlayable register banks
                             32 ;--------------------------------------------------------
                             33 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      34 	.ds 8
                             35 ;--------------------------------------------------------
                             36 ; overlayable bit register bank
                             37 ;--------------------------------------------------------
                             38 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      39 bits:
   0000                      40 	.ds 1
                    8000     41 	b0 = bits[0]
                    8100     42 	b1 = bits[1]
                    8200     43 	b2 = bits[2]
                    8300     44 	b3 = bits[3]
                    8400     45 	b4 = bits[4]
                    8500     46 	b5 = bits[5]
                    8600     47 	b6 = bits[6]
                    8700     48 	b7 = bits[7]
                             49 ;--------------------------------------------------------
                             50 ; internal ram data
                             51 ;--------------------------------------------------------
                             52 	.area DSEG    (DATA)
   0000                      53 _cur_x:
   0000                      54 	.ds 1
                             55 ;--------------------------------------------------------
                             56 ; overlayable items in internal ram 
                             57 ;--------------------------------------------------------
                             58 	.area OSEG    (OVR,DATA)
                             59 ;--------------------------------------------------------
                             60 ; indirectly addressable internal ram data
                             61 ;--------------------------------------------------------
                             62 	.area ISEG    (DATA)
                             63 ;--------------------------------------------------------
                             64 ; absolute internal ram data
                             65 ;--------------------------------------------------------
                             66 	.area IABS    (ABS,DATA)
                             67 	.area IABS    (ABS,DATA)
                             68 ;--------------------------------------------------------
                             69 ; bit data
                             70 ;--------------------------------------------------------
                             71 	.area BSEG    (BIT)
   0000                      72 _CurPosCtrl:
   0000                      73 	.ds 1
   0001                      74 _cur_y:
   0001                      75 	.ds 1
                             76 ;--------------------------------------------------------
                             77 ; paged external ram data
                             78 ;--------------------------------------------------------
                             79 	.area PSEG    (PAG,XDATA)
                             80 ;--------------------------------------------------------
                             81 ; external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XSEG    (XDATA)
                             84 ;--------------------------------------------------------
                             85 ; absolute external ram data
                             86 ;--------------------------------------------------------
                             87 	.area XABS    (ABS,XDATA)
                             88 ;--------------------------------------------------------
                             89 ; external initialized ram data
                             90 ;--------------------------------------------------------
                             91 	.area XISEG   (XDATA)
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT0 (CODE)
                             94 	.area GSINIT1 (CODE)
                             95 	.area GSINIT2 (CODE)
                             96 	.area GSINIT3 (CODE)
                             97 	.area GSINIT4 (CODE)
                             98 	.area GSINIT5 (CODE)
                             99 	.area GSINIT  (CODE)
                            100 	.area GSFINAL (CODE)
                            101 	.area CSEG    (CODE)
                            102 ;--------------------------------------------------------
                            103 ; global & static initialisations
                            104 ;--------------------------------------------------------
                            105 	.area HOME    (CODE)
                            106 	.area GSINIT  (CODE)
                            107 	.area GSFINAL (CODE)
                            108 	.area GSINIT  (CODE)
                            109 ;	SRC/lcd.c:46: static char cur_x=0;//0-15
   0000 75*00 00            110 	mov	_cur_x,#0x00
                            111 ;	SRC/lcd.c:41: static bit CurPosCtrl=1;    //Отслеживание драйвером текущей позиции курсора
   0003 D2*00               112 	setb	_CurPosCtrl
                            113 ;	SRC/lcd.c:47: static bit cur_y=0; //0/1
   0005 C2*01               114 	clr	_cur_y
                            115 ;--------------------------------------------------------
                            116 ; Home
                            117 ;--------------------------------------------------------
                            118 	.area HOME    (CODE)
                            119 	.area HOME    (CODE)
                            120 ;--------------------------------------------------------
                            121 ; code
                            122 ;--------------------------------------------------------
                            123 	.area CSEG    (CODE)
                            124 ;------------------------------------------------------------
                            125 ;Allocation info for local variables in function 'SwitchCurPosControl'
                            126 ;------------------------------------------------------------
                            127 ;o                         Allocated to registers 
                            128 ;------------------------------------------------------------
                            129 ;	SRC/lcd.c:66: void SwitchCurPosControl(bit o)
                            130 ;	-----------------------------------------
                            131 ;	 function SwitchCurPosControl
                            132 ;	-----------------------------------------
   0000                     133 _SwitchCurPosControl:
                    0002    134 	ar2 = 0x02
                    0003    135 	ar3 = 0x03
                    0004    136 	ar4 = 0x04
                    0005    137 	ar5 = 0x05
                    0006    138 	ar6 = 0x06
                    0007    139 	ar7 = 0x07
                    0000    140 	ar0 = 0x00
                    0001    141 	ar1 = 0x01
   0000 A2*00               142 	mov	c,b0
   0002 92*00               143 	mov	_CurPosCtrl,c
                            144 ;	SRC/lcd.c:68: CurPosCtrl=o;
   0004 22                  145 	ret
                            146 ;------------------------------------------------------------
                            147 ;Allocation info for local variables in function 'Strobe'
                            148 ;------------------------------------------------------------
                            149 ;c                         Allocated to registers r2 
                            150 ;i                         Allocated to registers r2 r3 
                            151 ;------------------------------------------------------------
                            152 ;	SRC/lcd.c:88: void Strobe(char c)
                            153 ;	-----------------------------------------
                            154 ;	 function Strobe
                            155 ;	-----------------------------------------
   0005                     156 _Strobe:
   0005 AA 82               157 	mov	r2,dpl
                            158 ;	SRC/lcd.c:92: WriteMax(C_IND,c | 0x1);  //Установка строба E
   0007 74 01               159 	mov	a,#0x01
   0009 4A                  160 	orl	a,r2
   000A FB                  161 	mov	r3,a
   000B C0 02               162 	push	ar2
   000D C0 03               163 	push	ar3
   000F 90 00 06            164 	mov	dptr,#0x0006
   0012 12s00r00            165 	lcall	_WriteMax
   0015 15 81               166 	dec	sp
   0017 D0 02               167 	pop	ar2
                            168 ;	SRC/lcd.c:93: WriteMax(C_IND,c & 0xFE); //Сброс строба
   0019 53 02 FE            169 	anl	ar2,#0xFE
   001C C0 02               170 	push	ar2
   001E 90 00 06            171 	mov	dptr,#0x0006
   0021 12s00r00            172 	lcall	_WriteMax
   0024 15 81               173 	dec	sp
                            174 ;	SRC/lcd.c:95: for (i=0;i<300;i++)continue; //Задержка на время исполнения команды 
   0026 7A 00               175 	mov	r2,#0x00
   0028 7B 00               176 	mov	r3,#0x00
   002A                     177 00101$:
   002A C3                  178 	clr	c
   002B EA                  179 	mov	a,r2
   002C 94 2C               180 	subb	a,#0x2C
   002E EB                  181 	mov	a,r3
   002F 94 01               182 	subb	a,#0x01
   0031 50 07               183 	jnc	00105$
   0033 0A                  184 	inc	r2
   0034 BA 00 F3            185 	cjne	r2,#0x00,00101$
   0037 0B                  186 	inc	r3
   0038 80 F0               187 	sjmp	00101$
   003A                     188 00105$:
   003A 22                  189 	ret
                            190 ;------------------------------------------------------------
                            191 ;Allocation info for local variables in function 'LCD_SwitchCursor'
                            192 ;------------------------------------------------------------
                            193 ;blink                     Allocated to registers b1 
                            194 ;cursor                    Allocated to registers b0 
                            195 ;i                         Allocated to registers 
                            196 ;------------------------------------------------------------
                            197 ;	SRC/lcd.c:113: void LCD_SwitchCursor(bit cursor, bit blink)
                            198 ;	-----------------------------------------
                            199 ;	 function LCD_SwitchCursor
                            200 ;	-----------------------------------------
   003B                     201 _LCD_SwitchCursor:
                            202 ;	SRC/lcd.c:119: ((cursor)?CURSOR_ON:0) |
   003B 30*00 04            203 	jnb	b0,00103$
   003E 7A 02               204 	mov	r2,#0x02
   0040 80 02               205 	sjmp	00104$
   0042                     206 00103$:
   0042 7A 00               207 	mov	r2,#0x00
   0044                     208 00104$:
   0044 43 02 0C            209 	orl	ar2,#0x0C
                            210 ;	SRC/lcd.c:120: ((blink)?BLINK:0) );
   0047 30*00 04            211 	jnb	b1,00105$
   004A 7B 01               212 	mov	r3,#0x01
   004C 80 02               213 	sjmp	00106$
   004E                     214 00105$:
   004E 7B 00               215 	mov	r3,#0x00
   0050                     216 00106$:
   0050 EB                  217 	mov	a,r3
   0051 42 02               218 	orl	ar2,a
                            219 ;	SRC/lcd.c:117: WriteMax( DATA_IND, DISPLAY_CTRL |
   0053 C0 02               220 	push	ar2
   0055 90 00 01            221 	mov	dptr,#0x0001
   0058 12s00r00            222 	lcall	_WriteMax
   005B 15 81               223 	dec	sp
                            224 ;	SRC/lcd.c:122: Strobe(0x8); //R/W = 0; RS = 0
   005D 75 82 08            225 	mov	dpl,#0x08
   0060 02s00r05            226 	ljmp	_Strobe
                            227 ;------------------------------------------------------------
                            228 ;Allocation info for local variables in function 'LCD_Clear'
                            229 ;------------------------------------------------------------
                            230 ;i                         Allocated to stack - offset 1
                            231 ;------------------------------------------------------------
                            232 ;	SRC/lcd.c:136: void LCD_Clear(void)
                            233 ;	-----------------------------------------
                            234 ;	 function LCD_Clear
                            235 ;	-----------------------------------------
   0063                     236 _LCD_Clear:
                            237 ;	SRC/lcd.c:140: WriteMax(DATA_IND, CLEAR);
   0063 74 01               238 	mov	a,#0x01
   0065 C0 E0               239 	push	acc
   0067 90 00 01            240 	mov	dptr,#0x0001
   006A 12s00r00            241 	lcall	_WriteMax
   006D 15 81               242 	dec	sp
                            243 ;	SRC/lcd.c:141: Strobe(0x8); //clear
   006F 75 82 08            244 	mov	dpl,#0x08
   0072 12s00r05            245 	lcall	_Strobe
                            246 ;	SRC/lcd.c:142: cur_x = 0;
   0075 75*00 00            247 	mov	_cur_x,#0x00
                            248 ;	SRC/lcd.c:143: cur_y = 0;
   0078 C2*01               249 	clr	_cur_y
   007A 22                  250 	ret
                            251 ;------------------------------------------------------------
                            252 ;Allocation info for local variables in function 'InitLCD'
                            253 ;------------------------------------------------------------
                            254 ;i                         Allocated to registers r2 r3 
                            255 ;------------------------------------------------------------
                            256 ;	SRC/lcd.c:157: void InitLCD(void)
                            257 ;	-----------------------------------------
                            258 ;	 function InitLCD
                            259 ;	-----------------------------------------
   007B                     260 _InitLCD:
                            261 ;	SRC/lcd.c:161: for(i=0; i<4000; i++)continue; //Ожидание включения ЖКИ (>15мс после подачи 
   007B 7A 00               262 	mov	r2,#0x00
   007D 7B 00               263 	mov	r3,#0x00
   007F                     264 00101$:
   007F C3                  265 	clr	c
   0080 EA                  266 	mov	a,r2
   0081 94 A0               267 	subb	a,#0xA0
   0083 EB                  268 	mov	a,r3
   0084 94 0F               269 	subb	a,#0x0F
   0086 50 07               270 	jnc	00104$
   0088 0A                  271 	inc	r2
   0089 BA 00 F3            272 	cjne	r2,#0x00,00101$
   008C 0B                  273 	inc	r3
   008D 80 F0               274 	sjmp	00101$
   008F                     275 00104$:
                            276 ;	SRC/lcd.c:164: WriteMax(DATA_IND, FUNCTION_SET|EIGHT_BITS);
   008F 74 30               277 	mov	a,#0x30
   0091 C0 E0               278 	push	acc
   0093 90 00 01            279 	mov	dptr,#0x0001
   0096 12s00r00            280 	lcall	_WriteMax
   0099 15 81               281 	dec	sp
                            282 ;	SRC/lcd.c:165: Strobe(0x8);
   009B 75 82 08            283 	mov	dpl,#0x08
   009E 12s00r05            284 	lcall	_Strobe
                            285 ;	SRC/lcd.c:166: for(i=0; i<1500; i++)continue; //Ожидание, предусмотренное протоколом
   00A1 7A 00               286 	mov	r2,#0x00
   00A3 7B 00               287 	mov	r3,#0x00
   00A5                     288 00105$:
   00A5 C3                  289 	clr	c
   00A6 EA                  290 	mov	a,r2
   00A7 94 DC               291 	subb	a,#0xDC
   00A9 EB                  292 	mov	a,r3
   00AA 94 05               293 	subb	a,#0x05
   00AC 50 07               294 	jnc	00108$
   00AE 0A                  295 	inc	r2
   00AF BA 00 F3            296 	cjne	r2,#0x00,00105$
   00B2 0B                  297 	inc	r3
   00B3 80 F0               298 	sjmp	00105$
   00B5                     299 00108$:
                            300 ;	SRC/lcd.c:170: WriteMax(DATA_IND, FUNCTION_SET|EIGHT_BITS);
   00B5 74 30               301 	mov	a,#0x30
   00B7 C0 E0               302 	push	acc
   00B9 90 00 01            303 	mov	dptr,#0x0001
   00BC 12s00r00            304 	lcall	_WriteMax
   00BF 15 81               305 	dec	sp
                            306 ;	SRC/lcd.c:171: Strobe(0x8);
   00C1 75 82 08            307 	mov	dpl,#0x08
   00C4 12s00r05            308 	lcall	_Strobe
                            309 ;	SRC/lcd.c:172: for(i=0; i<50; i++)continue;   //Ожидание, предусмотренное протоколом
   00C7 7A 00               310 	mov	r2,#0x00
   00C9 7B 00               311 	mov	r3,#0x00
   00CB                     312 00109$:
   00CB C3                  313 	clr	c
   00CC EA                  314 	mov	a,r2
   00CD 94 32               315 	subb	a,#0x32
   00CF EB                  316 	mov	a,r3
   00D0 94 00               317 	subb	a,#0x00
   00D2 50 07               318 	jnc	00112$
   00D4 0A                  319 	inc	r2
   00D5 BA 00 F3            320 	cjne	r2,#0x00,00109$
   00D8 0B                  321 	inc	r3
   00D9 80 F0               322 	sjmp	00109$
   00DB                     323 00112$:
                            324 ;	SRC/lcd.c:175: WriteMax(DATA_IND, FUNCTION_SET|EIGHT_BITS);
   00DB 74 30               325 	mov	a,#0x30
   00DD C0 E0               326 	push	acc
   00DF 90 00 01            327 	mov	dptr,#0x0001
   00E2 12s00r00            328 	lcall	_WriteMax
   00E5 15 81               329 	dec	sp
                            330 ;	SRC/lcd.c:176: Strobe(0x8);
   00E7 75 82 08            331 	mov	dpl,#0x08
   00EA 12s00r05            332 	lcall	_Strobe
                            333 ;	SRC/lcd.c:180: WriteMax(DATA_IND, FUNCTION_SET|EIGHT_BITS|TWO_LINE);
   00ED 74 38               334 	mov	a,#0x38
   00EF C0 E0               335 	push	acc
   00F1 90 00 01            336 	mov	dptr,#0x0001
   00F4 12s00r00            337 	lcall	_WriteMax
   00F7 15 81               338 	dec	sp
                            339 ;	SRC/lcd.c:181: Strobe(0x8);
   00F9 75 82 08            340 	mov	dpl,#0x08
   00FC 12s00r05            341 	lcall	_Strobe
                            342 ;	SRC/lcd.c:184: WriteMax(DATA_IND, DISPLAY_CTRL); //Display off
   00FF 74 08               343 	mov	a,#0x08
   0101 C0 E0               344 	push	acc
   0103 90 00 01            345 	mov	dptr,#0x0001
   0106 12s00r00            346 	lcall	_WriteMax
   0109 15 81               347 	dec	sp
                            348 ;	SRC/lcd.c:185: Strobe(0x8);
   010B 75 82 08            349 	mov	dpl,#0x08
   010E 12s00r05            350 	lcall	_Strobe
                            351 ;	SRC/lcd.c:188: WriteMax(DATA_IND, CLEAR); 
   0111 74 01               352 	mov	a,#0x01
   0113 C0 E0               353 	push	acc
   0115 90 00 01            354 	mov	dptr,#0x0001
   0118 12s00r00            355 	lcall	_WriteMax
   011B 15 81               356 	dec	sp
                            357 ;	SRC/lcd.c:189: Strobe(0x8);
   011D 75 82 08            358 	mov	dpl,#0x08
   0120 12s00r05            359 	lcall	_Strobe
                            360 ;	SRC/lcd.c:192: WriteMax(DATA_IND, ENTRY_MODE|INCR);
   0123 74 06               361 	mov	a,#0x06
   0125 C0 E0               362 	push	acc
   0127 90 00 01            363 	mov	dptr,#0x0001
   012A 12s00r00            364 	lcall	_WriteMax
   012D 15 81               365 	dec	sp
                            366 ;	SRC/lcd.c:193: Strobe(0x8);
   012F 75 82 08            367 	mov	dpl,#0x08
   0132 12s00r05            368 	lcall	_Strobe
                            369 ;	SRC/lcd.c:195: WriteMax(DATA_IND, DISPLAY_CTRL|DISPLAY_ON); //Cursor OFF, Blinking OFF
   0135 74 0C               370 	mov	a,#0x0C
   0137 C0 E0               371 	push	acc
   0139 90 00 01            372 	mov	dptr,#0x0001
   013C 12s00r00            373 	lcall	_WriteMax
   013F 15 81               374 	dec	sp
                            375 ;	SRC/lcd.c:196: Strobe(0x8);
   0141 75 82 08            376 	mov	dpl,#0x08
   0144 02s00r05            377 	ljmp	_Strobe
                            378 ;------------------------------------------------------------
                            379 ;Allocation info for local variables in function 'LCD_Putch'
                            380 ;------------------------------------------------------------
                            381 ;ch                        Allocated to registers r2 
                            382 ;------------------------------------------------------------
                            383 ;	SRC/lcd.c:212: void LCD_Putch(char ch)
                            384 ;	-----------------------------------------
                            385 ;	 function LCD_Putch
                            386 ;	-----------------------------------------
   0147                     387 _LCD_Putch:
   0147 AA 82               388 	mov	r2,dpl
                            389 ;	SRC/lcd.c:215: if(CurPosCtrl)
   0149 30*00 25            390 	jnb	_CurPosCtrl,00104$
                            391 ;	SRC/lcd.c:217: LCD_GotoXY(cur_x,cur_y);
   014C 85*00 82            392 	mov	dpl,_cur_x
   014F A2*01               393 	mov	c,_cur_y
   0151 92 F0               394 	mov	b[0],c
   0153 C0 02               395 	push	ar2
   0155 85 F0*00            396 	mov	bits,b
   0158 12s01r81            397 	lcall	_LCD_GotoXY
   015B D0 02               398 	pop	ar2
                            399 ;	SRC/lcd.c:218: if(++cur_x>15)cur_x=0,cur_y=~cur_y;
   015D 05*00               400 	inc	_cur_x
   015F C3                  401 	clr	c
   0160 74 8F               402 	mov	a,#(0x0F ^ 0x80)
   0162 85*00 F0            403 	mov	b,_cur_x
   0165 63 F0 80            404 	xrl	b,#0x80
   0168 95 F0               405 	subb	a,b
   016A 50 05               406 	jnc	00104$
   016C 75*00 00            407 	mov	_cur_x,#0x00
   016F D2*01               408 	setb	_cur_y
   0171                     409 00104$:
                            410 ;	SRC/lcd.c:221: WriteMax(DATA_IND,ch);
   0171 C0 02               411 	push	ar2
   0173 90 00 01            412 	mov	dptr,#0x0001
   0176 12s00r00            413 	lcall	_WriteMax
   0179 15 81               414 	dec	sp
                            415 ;	SRC/lcd.c:222: Strobe(0xC); //R/W = 0, RS = 1 (данные)
   017B 75 82 0C            416 	mov	dpl,#0x0C
   017E 02s00r05            417 	ljmp	_Strobe
                            418 ;------------------------------------------------------------
                            419 ;Allocation info for local variables in function 'LCD_GotoXY'
                            420 ;------------------------------------------------------------
                            421 ;y                         Allocated to registers b0 
                            422 ;x                         Allocated to registers r2 
                            423 ;------------------------------------------------------------
                            424 ;	SRC/lcd.c:235: void LCD_GotoXY(unsigned char x,bit y)
                            425 ;	-----------------------------------------
                            426 ;	 function LCD_GotoXY
                            427 ;	-----------------------------------------
   0181                     428 _LCD_GotoXY:
   0181 AA 82               429 	mov	r2,dpl
                            430 ;	SRC/lcd.c:237: WriteMax(DATA_IND,RAM_DD|(x+((y)?0x40:0)));
   0183 30*00 04            431 	jnb	b0,00103$
   0186 7B 40               432 	mov	r3,#0x40
   0188 80 02               433 	sjmp	00104$
   018A                     434 00103$:
   018A 7B 00               435 	mov	r3,#0x00
   018C                     436 00104$:
   018C EB                  437 	mov	a,r3
   018D 2A                  438 	add	a,r2
   018E F5 F0               439 	mov	b,a
   0190 74 80               440 	mov	a,#0x80
   0192 45 F0               441 	orl	a,b
   0194 FB                  442 	mov	r3,a
   0195 C0 02               443 	push	ar2
   0197 C0*00               444 	push	bits
   0199 C0 03               445 	push	ar3
   019B 90 00 01            446 	mov	dptr,#0x0001
   019E 12s00r00            447 	lcall	_WriteMax
   01A1 15 81               448 	dec	sp
   01A3 D0*00               449 	pop	bits
                            450 ;	SRC/lcd.c:238: Strobe(0x8); //set ram
   01A5 75 82 08            451 	mov	dpl,#0x08
   01A8 C0*00               452 	push	bits
   01AA 12s00r05            453 	lcall	_Strobe
   01AD D0*00               454 	pop	bits
   01AF D0 02               455 	pop	ar2
                            456 ;	SRC/lcd.c:239: cur_x = x;
   01B1 8A*00               457 	mov	_cur_x,r2
                            458 ;	SRC/lcd.c:240: cur_y = y;
   01B3 A2*00               459 	mov	c,b0
   01B5 92*01               460 	mov	_cur_y,c
   01B7 22                  461 	ret
                            462 ;------------------------------------------------------------
                            463 ;Allocation info for local variables in function 'LCD_Type'
                            464 ;------------------------------------------------------------
                            465 ;s                         Allocated to registers r2 r3 r4 
                            466 ;t                         Allocated to registers b0 
                            467 ;------------------------------------------------------------
                            468 ;	SRC/lcd.c:252: void LCD_Type(char* s)
                            469 ;	-----------------------------------------
                            470 ;	 function LCD_Type
                            471 ;	-----------------------------------------
   01B8                     472 _LCD_Type:
   01B8 AA 82               473 	mov	r2,dpl
   01BA AB 83               474 	mov	r3,dph
   01BC AC F0               475 	mov	r4,b
                            476 ;	SRC/lcd.c:254: bit t = CurPosCtrl;
   01BE A2*00               477 	mov	c,_CurPosCtrl
   01C0 92*00               478 	mov	b0,c
                            479 ;	SRC/lcd.c:256: SwitchCurPosControl(1);
   01C2 D2 F0               480 	setb	b[0]
   01C4 C0 02               481 	push	ar2
   01C6 C0 03               482 	push	ar3
   01C8 C0 04               483 	push	ar4
   01CA C0*00               484 	push	bits
   01CC 85 F0*00            485 	mov	bits,b
   01CF 12s00r00            486 	lcall	_SwitchCurPosControl
   01D2 D0*00               487 	pop	bits
   01D4 D0 04               488 	pop	ar4
   01D6 D0 03               489 	pop	ar3
   01D8 D0 02               490 	pop	ar2
                            491 ;	SRC/lcd.c:257: while(*s)
   01DA                     492 00101$:
   01DA 8A 82               493 	mov	dpl,r2
   01DC 8B 83               494 	mov	dph,r3
   01DE 8C F0               495 	mov	b,r4
   01E0 12s00r00            496 	lcall	__gptrget
   01E3 FD                  497 	mov	r5,a
   01E4 60 1C               498 	jz	00103$
                            499 ;	SRC/lcd.c:258: LCD_Putch(*s++);
   01E6 0A                  500 	inc	r2
   01E7 BA 00 01            501 	cjne	r2,#0x00,00110$
   01EA 0B                  502 	inc	r3
   01EB                     503 00110$:
   01EB 8D 82               504 	mov	dpl,r5
   01ED C0 02               505 	push	ar2
   01EF C0 03               506 	push	ar3
   01F1 C0 04               507 	push	ar4
   01F3 C0*00               508 	push	bits
   01F5 12s01r47            509 	lcall	_LCD_Putch
   01F8 D0*00               510 	pop	bits
   01FA D0 04               511 	pop	ar4
   01FC D0 03               512 	pop	ar3
   01FE D0 02               513 	pop	ar2
   0200 80 D8               514 	sjmp	00101$
   0202                     515 00103$:
                            516 ;	SRC/lcd.c:260: SwitchCurPosControl(t);
   0202 A2*00               517 	mov	c,b0
   0204 92 F0               518 	mov	b[0],c
   0206 85 F0*00            519 	mov	bits,b
   0209 02s00r00            520 	ljmp	_SwitchCurPosControl
                            521 ;------------------------------------------------------------
                            522 ;Allocation info for local variables in function 'LCD_GetX'
                            523 ;------------------------------------------------------------
                            524 ;------------------------------------------------------------
                            525 ;	SRC/lcd.c:270: char LCD_GetX(void){
                            526 ;	-----------------------------------------
                            527 ;	 function LCD_GetX
                            528 ;	-----------------------------------------
   020C                     529 _LCD_GetX:
                            530 ;	SRC/lcd.c:271: return cur_x;
   020C 85*00 82            531 	mov	dpl,_cur_x
   020F 22                  532 	ret
                            533 ;------------------------------------------------------------
                            534 ;Allocation info for local variables in function 'LCD_GetY'
                            535 ;------------------------------------------------------------
                            536 ;------------------------------------------------------------
                            537 ;	SRC/lcd.c:274: bit LCD_GetY(void){
                            538 ;	-----------------------------------------
                            539 ;	 function LCD_GetY
                            540 ;	-----------------------------------------
   0210                     541 _LCD_GetY:
                            542 ;	SRC/lcd.c:275: return cur_y;
   0210 A2*01               543 	mov	c,_cur_y
   0212 22                  544 	ret
                            545 	.area CSEG    (CODE)
                            546 	.area CONST   (CODE)
                            547 	.area XINIT   (CODE)
                            548 	.area CABS    (ABS,CODE)
