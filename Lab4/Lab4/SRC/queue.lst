                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                              4 ; This file was generated Sun Jan 13 00:30:17 2019
                              5 ;--------------------------------------------------------
                              6 	.module queue
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Push
                             13 	.globl _Pop
                             14 	.globl _isEmpty
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (DATA)
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (DATA)
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'Push'
                             93 ;------------------------------------------------------------
                             94 ;value                     Allocated to stack - offset -3
                             95 ;queue                     Allocated to stack - offset 1
                             96 ;node                      Allocated to stack - offset 4
                             97 ;sloc0                     Allocated to stack - offset 7
                             98 ;------------------------------------------------------------
                             99 ;	SRC/queue.c:11: TQueue* Push(TQueue* queue, char value)
                            100 ;	-----------------------------------------
                            101 ;	 function Push
                            102 ;	-----------------------------------------
   0000                     103 _Push:
                    0002    104 	ar2 = 0x02
                    0003    105 	ar3 = 0x03
                    0004    106 	ar4 = 0x04
                    0005    107 	ar5 = 0x05
                    0006    108 	ar6 = 0x06
                    0007    109 	ar7 = 0x07
                    0000    110 	ar0 = 0x00
                    0001    111 	ar1 = 0x01
   0000 C0*00               112 	push	_bp
   0002 85 81*00            113 	mov	_bp,sp
   0005 C0 82               114 	push	dpl
   0007 C0 83               115 	push	dph
   0009 C0 F0               116 	push	b
   000B 05 81               117 	inc	sp
   000D 05 81               118 	inc	sp
   000F 05 81               119 	inc	sp
                            120 ;	SRC/queue.c:14: TNode* node = malloc(sizeof(TNode));
   0011 90 00 04            121 	mov	dptr,#0x0004
   0014 12s00r00            122 	lcall	_malloc
   0017 AD 82               123 	mov	r5,dpl
   0019 AE 83               124 	mov	r6,dph
   001B E5*00               125 	mov	a,_bp
   001D 24 04               126 	add	a,#0x04
   001F F8                  127 	mov	r0,a
   0020 A6 05               128 	mov	@r0,ar5
   0022 08                  129 	inc	r0
   0023 A6 06               130 	mov	@r0,ar6
   0025 08                  131 	inc	r0
   0026 76 00               132 	mov	@r0,#0x00
                            133 ;	SRC/queue.c:16: node->value = value;
   0028 E5*00               134 	mov	a,_bp
   002A 24 04               135 	add	a,#0x04
   002C F8                  136 	mov	r0,a
   002D 86 82               137 	mov	dpl,@r0
   002F 08                  138 	inc	r0
   0030 86 83               139 	mov	dph,@r0
   0032 08                  140 	inc	r0
   0033 86 F0               141 	mov	b,@r0
   0035 A9*00               142 	mov	r1,_bp
   0037 19                  143 	dec	r1
   0038 19                  144 	dec	r1
   0039 19                  145 	dec	r1
   003A E7                  146 	mov	a,@r1
   003B 12s00r00            147 	lcall	__gptrput
                            148 ;	SRC/queue.c:19: node->next = NULL;
   003E E5*00               149 	mov	a,_bp
   0040 24 04               150 	add	a,#0x04
   0042 F8                  151 	mov	r0,a
   0043 74 01               152 	mov	a,#0x01
   0045 26                  153 	add	a,@r0
   0046 FA                  154 	mov	r2,a
   0047 E4                  155 	clr	a
   0048 08                  156 	inc	r0
   0049 36                  157 	addc	a,@r0
   004A FB                  158 	mov	r3,a
   004B 08                  159 	inc	r0
   004C 86 04               160 	mov	ar4,@r0
   004E 8A 82               161 	mov	dpl,r2
   0050 8B 83               162 	mov	dph,r3
   0052 8C F0               163 	mov	b,r4
   0054 E4                  164 	clr	a
   0055 12s00r00            165 	lcall	__gptrput
   0058 A3                  166 	inc	dptr
   0059 E4                  167 	clr	a
   005A 12s00r00            168 	lcall	__gptrput
   005D A3                  169 	inc	dptr
   005E E4                  170 	clr	a
   005F 12s00r00            171 	lcall	__gptrput
                            172 ;	SRC/queue.c:22: if (queue->head!=NULL && queue->tail!=NULL)
   0062 A8*00               173 	mov	r0,_bp
   0064 08                  174 	inc	r0
   0065 86 82               175 	mov	dpl,@r0
   0067 08                  176 	inc	r0
   0068 86 83               177 	mov	dph,@r0
   006A 08                  178 	inc	r0
   006B 86 F0               179 	mov	b,@r0
   006D 12s00r00            180 	lcall	__gptrget
   0070 FA                  181 	mov	r2,a
   0071 A3                  182 	inc	dptr
   0072 12s00r00            183 	lcall	__gptrget
   0075 FB                  184 	mov	r3,a
   0076 A3                  185 	inc	dptr
   0077 12s00r00            186 	lcall	__gptrget
   007A FC                  187 	mov	r4,a
   007B BA 00 08            188 	cjne	r2,#0x00,00109$
   007E BB 00 05            189 	cjne	r3,#0x00,00109$
   0081 BC 00 02            190 	cjne	r4,#0x00,00109$
   0084 80 6A               191 	sjmp	00102$
   0086                     192 00109$:
   0086 A8*00               193 	mov	r0,_bp
   0088 08                  194 	inc	r0
   0089 74 03               195 	mov	a,#0x03
   008B 26                  196 	add	a,@r0
   008C FA                  197 	mov	r2,a
   008D E4                  198 	clr	a
   008E 08                  199 	inc	r0
   008F 36                  200 	addc	a,@r0
   0090 FB                  201 	mov	r3,a
   0091 08                  202 	inc	r0
   0092 86 04               203 	mov	ar4,@r0
   0094 8A 82               204 	mov	dpl,r2
   0096 8B 83               205 	mov	dph,r3
   0098 8C F0               206 	mov	b,r4
   009A 12s00r00            207 	lcall	__gptrget
   009D FD                  208 	mov	r5,a
   009E A3                  209 	inc	dptr
   009F 12s00r00            210 	lcall	__gptrget
   00A2 FE                  211 	mov	r6,a
   00A3 A3                  212 	inc	dptr
   00A4 12s00r00            213 	lcall	__gptrget
   00A7 FF                  214 	mov	r7,a
   00A8 BD 00 08            215 	cjne	r5,#0x00,00110$
   00AB BE 00 05            216 	cjne	r6,#0x00,00110$
   00AE BF 00 02            217 	cjne	r7,#0x00,00110$
   00B1 80 3D               218 	sjmp	00102$
   00B3                     219 00110$:
                            220 ;	SRC/queue.c:26: queue->tail->next = node;
   00B3 0D                  221 	inc	r5
   00B4 BD 00 01            222 	cjne	r5,#0x00,00111$
   00B7 0E                  223 	inc	r6
   00B8                     224 00111$:
   00B8 8D 82               225 	mov	dpl,r5
   00BA 8E 83               226 	mov	dph,r6
   00BC 8F F0               227 	mov	b,r7
   00BE E5*00               228 	mov	a,_bp
   00C0 24 04               229 	add	a,#0x04
   00C2 F8                  230 	mov	r0,a
   00C3 E6                  231 	mov	a,@r0
   00C4 12s00r00            232 	lcall	__gptrput
   00C7 A3                  233 	inc	dptr
   00C8 08                  234 	inc	r0
   00C9 E6                  235 	mov	a,@r0
   00CA 12s00r00            236 	lcall	__gptrput
   00CD A3                  237 	inc	dptr
   00CE 08                  238 	inc	r0
   00CF E6                  239 	mov	a,@r0
   00D0 12s00r00            240 	lcall	__gptrput
                            241 ;	SRC/queue.c:28: queue->tail = node;
   00D3 8A 82               242 	mov	dpl,r2
   00D5 8B 83               243 	mov	dph,r3
   00D7 8C F0               244 	mov	b,r4
   00D9 E5*00               245 	mov	a,_bp
   00DB 24 04               246 	add	a,#0x04
   00DD F8                  247 	mov	r0,a
   00DE E6                  248 	mov	a,@r0
   00DF 12s00r00            249 	lcall	__gptrput
   00E2 A3                  250 	inc	dptr
   00E3 08                  251 	inc	r0
   00E4 E6                  252 	mov	a,@r0
   00E5 12s00r00            253 	lcall	__gptrput
   00E8 A3                  254 	inc	dptr
   00E9 08                  255 	inc	r0
   00EA E6                  256 	mov	a,@r0
   00EB 12s00r00            257 	lcall	__gptrput
   00EE 80 49               258 	sjmp	00103$
   00F0                     259 00102$:
                            260 ;	SRC/queue.c:34: queue->head = queue->tail = node;
   00F0 A8*00               261 	mov	r0,_bp
   00F2 08                  262 	inc	r0
   00F3 74 03               263 	mov	a,#0x03
   00F5 26                  264 	add	a,@r0
   00F6 FA                  265 	mov	r2,a
   00F7 E4                  266 	clr	a
   00F8 08                  267 	inc	r0
   00F9 36                  268 	addc	a,@r0
   00FA FB                  269 	mov	r3,a
   00FB 08                  270 	inc	r0
   00FC 86 04               271 	mov	ar4,@r0
   00FE 8A 82               272 	mov	dpl,r2
   0100 8B 83               273 	mov	dph,r3
   0102 8C F0               274 	mov	b,r4
   0104 E5*00               275 	mov	a,_bp
   0106 24 04               276 	add	a,#0x04
   0108 F8                  277 	mov	r0,a
   0109 E6                  278 	mov	a,@r0
   010A 12s00r00            279 	lcall	__gptrput
   010D A3                  280 	inc	dptr
   010E 08                  281 	inc	r0
   010F E6                  282 	mov	a,@r0
   0110 12s00r00            283 	lcall	__gptrput
   0113 A3                  284 	inc	dptr
   0114 08                  285 	inc	r0
   0115 E6                  286 	mov	a,@r0
   0116 12s00r00            287 	lcall	__gptrput
   0119 A8*00               288 	mov	r0,_bp
   011B 08                  289 	inc	r0
   011C 86 82               290 	mov	dpl,@r0
   011E 08                  291 	inc	r0
   011F 86 83               292 	mov	dph,@r0
   0121 08                  293 	inc	r0
   0122 86 F0               294 	mov	b,@r0
   0124 E5*00               295 	mov	a,_bp
   0126 24 04               296 	add	a,#0x04
   0128 F9                  297 	mov	r1,a
   0129 E7                  298 	mov	a,@r1
   012A 12s00r00            299 	lcall	__gptrput
   012D A3                  300 	inc	dptr
   012E 09                  301 	inc	r1
   012F E7                  302 	mov	a,@r1
   0130 12s00r00            303 	lcall	__gptrput
   0133 A3                  304 	inc	dptr
   0134 09                  305 	inc	r1
   0135 E7                  306 	mov	a,@r1
   0136 12s00r00            307 	lcall	__gptrput
   0139                     308 00103$:
                            309 ;	SRC/queue.c:37: return queue;
   0139 A8*00               310 	mov	r0,_bp
   013B 08                  311 	inc	r0
   013C 86 82               312 	mov	dpl,@r0
   013E 08                  313 	inc	r0
   013F 86 83               314 	mov	dph,@r0
   0141 08                  315 	inc	r0
   0142 86 F0               316 	mov	b,@r0
   0144 85*00 81            317 	mov	sp,_bp
   0147 D0*00               318 	pop	_bp
   0149 22                  319 	ret
                            320 ;------------------------------------------------------------
                            321 ;Allocation info for local variables in function 'Pop'
                            322 ;------------------------------------------------------------
                            323 ;queue                     Allocated to stack - offset 1
                            324 ;value                     Allocated to stack - offset 7
                            325 ;node                      Allocated to stack - offset 4
                            326 ;sloc0                     Allocated to stack - offset 8
                            327 ;sloc1                     Allocated to stack - offset 7
                            328 ;------------------------------------------------------------
                            329 ;	SRC/queue.c:41: char Pop(TQueue* queue)
                            330 ;	-----------------------------------------
                            331 ;	 function Pop
                            332 ;	-----------------------------------------
   014A                     333 _Pop:
   014A C0*00               334 	push	_bp
   014C 85 81*00            335 	mov	_bp,sp
   014F C0 82               336 	push	dpl
   0151 C0 83               337 	push	dph
   0153 C0 F0               338 	push	b
   0155 E5 81               339 	mov	a,sp
   0157 24 07               340 	add	a,#0x07
   0159 F5 81               341 	mov	sp,a
                            342 ;	SRC/queue.c:43: unsigned char value = 0;
   015B E5*00               343 	mov	a,_bp
   015D 24 07               344 	add	a,#0x07
   015F F8                  345 	mov	r0,a
   0160 76 00               346 	mov	@r0,#0x00
                            347 ;	SRC/queue.c:47: if (queue->head)
   0162 A8*00               348 	mov	r0,_bp
   0164 08                  349 	inc	r0
   0165 86 82               350 	mov	dpl,@r0
   0167 08                  351 	inc	r0
   0168 86 83               352 	mov	dph,@r0
   016A 08                  353 	inc	r0
   016B 86 F0               354 	mov	b,@r0
   016D 12s00r00            355 	lcall	__gptrget
   0170 FA                  356 	mov	r2,a
   0171 A3                  357 	inc	dptr
   0172 12s00r00            358 	lcall	__gptrget
   0175 FB                  359 	mov	r3,a
   0176 A3                  360 	inc	dptr
   0177 12s00r00            361 	lcall	__gptrget
   017A FC                  362 	mov	r4,a
   017B EA                  363 	mov	a,r2
   017C 4B                  364 	orl	a,r3
   017D 4C                  365 	orl	a,r4
   017E 60 71               366 	jz	00102$
                            367 ;	SRC/queue.c:50: node = queue->head;
   0180 E5*00               368 	mov	a,_bp
   0182 24 04               369 	add	a,#0x04
   0184 F8                  370 	mov	r0,a
   0185 A6 02               371 	mov	@r0,ar2
   0187 08                  372 	inc	r0
   0188 A6 03               373 	mov	@r0,ar3
   018A 08                  374 	inc	r0
   018B A6 04               375 	mov	@r0,ar4
   018D E5*00               376 	mov	a,_bp
   018F 24 04               377 	add	a,#0x04
   0191 F8                  378 	mov	r0,a
   0192 86 03               379 	mov	ar3,@r0
   0194 08                  380 	inc	r0
   0195 86 04               381 	mov	ar4,@r0
   0197 08                  382 	inc	r0
   0198 86 02               383 	mov	ar2,@r0
                            384 ;	SRC/queue.c:52: value = node->value;
   019A 8B 82               385 	mov	dpl,r3
   019C 8C 83               386 	mov	dph,r4
   019E 8A F0               387 	mov	b,r2
   01A0 12s00r00            388 	lcall	__gptrget
   01A3 FE                  389 	mov	r6,a
   01A4 E5*00               390 	mov	a,_bp
   01A6 24 07               391 	add	a,#0x07
   01A8 F8                  392 	mov	r0,a
   01A9 A6 06               393 	mov	@r0,ar6
                            394 ;	SRC/queue.c:54: queue->head = queue->head->next;
   01AB E5*00               395 	mov	a,_bp
   01AD 24 04               396 	add	a,#0x04
   01AF F8                  397 	mov	r0,a
   01B0 74 01               398 	mov	a,#0x01
   01B2 26                  399 	add	a,@r0
   01B3 FE                  400 	mov	r6,a
   01B4 E4                  401 	clr	a
   01B5 08                  402 	inc	r0
   01B6 36                  403 	addc	a,@r0
   01B7 FF                  404 	mov	r7,a
   01B8 08                  405 	inc	r0
   01B9 86 05               406 	mov	ar5,@r0
   01BB 8E 82               407 	mov	dpl,r6
   01BD 8F 83               408 	mov	dph,r7
   01BF 8D F0               409 	mov	b,r5
   01C1 12s00r00            410 	lcall	__gptrget
   01C4 FE                  411 	mov	r6,a
   01C5 A3                  412 	inc	dptr
   01C6 12s00r00            413 	lcall	__gptrget
   01C9 FF                  414 	mov	r7,a
   01CA A3                  415 	inc	dptr
   01CB 12s00r00            416 	lcall	__gptrget
   01CE FD                  417 	mov	r5,a
   01CF A8*00               418 	mov	r0,_bp
   01D1 08                  419 	inc	r0
   01D2 86 82               420 	mov	dpl,@r0
   01D4 08                  421 	inc	r0
   01D5 86 83               422 	mov	dph,@r0
   01D7 08                  423 	inc	r0
   01D8 86 F0               424 	mov	b,@r0
   01DA EE                  425 	mov	a,r6
   01DB 12s00r00            426 	lcall	__gptrput
   01DE A3                  427 	inc	dptr
   01DF EF                  428 	mov	a,r7
   01E0 12s00r00            429 	lcall	__gptrput
   01E3 A3                  430 	inc	dptr
   01E4 ED                  431 	mov	a,r5
   01E5 12s00r00            432 	lcall	__gptrput
                            433 ;	SRC/queue.c:56: free(node);
   01E8 8B 82               434 	mov	dpl,r3
   01EA 8C 83               435 	mov	dph,r4
   01EC 8A F0               436 	mov	b,r2
   01EE 12s00r00            437 	lcall	_free
   01F1                     438 00102$:
                            439 ;	SRC/queue.c:59: return value;
   01F1 E5*00               440 	mov	a,_bp
   01F3 24 07               441 	add	a,#0x07
   01F5 F8                  442 	mov	r0,a
   01F6 86 82               443 	mov	dpl,@r0
   01F8 85*00 81            444 	mov	sp,_bp
   01FB D0*00               445 	pop	_bp
   01FD 22                  446 	ret
                            447 ;------------------------------------------------------------
                            448 ;Allocation info for local variables in function 'isEmpty'
                            449 ;------------------------------------------------------------
                            450 ;queue                     Allocated to registers r2 r3 r4 
                            451 ;------------------------------------------------------------
                            452 ;	SRC/queue.c:78: char isEmpty(TQueue* queue)
                            453 ;	-----------------------------------------
                            454 ;	 function isEmpty
                            455 ;	-----------------------------------------
   01FE                     456 _isEmpty:
                            457 ;	SRC/queue.c:80: return queue->head==NULL;
   01FE 12s00r00            458 	lcall	__gptrget
   0201 FA                  459 	mov	r2,a
   0202 A3                  460 	inc	dptr
   0203 12s00r00            461 	lcall	__gptrget
   0206 FB                  462 	mov	r3,a
   0207 A3                  463 	inc	dptr
   0208 12s00r00            464 	lcall	__gptrget
   020B FC                  465 	mov	r4,a
   020C E4                  466 	clr	a
   020D BA 00 07            467 	cjne	r2,#0x00,00103$
   0210 BB 00 04            468 	cjne	r3,#0x00,00103$
   0213 BC 00 01            469 	cjne	r4,#0x00,00103$
   0216 04                  470 	inc	a
   0217                     471 00103$:
   0217 F5 82               472 	mov	dpl,a
   0219 22                  473 	ret
                            474 	.area CSEG    (CODE)
                            475 	.area CONST   (CODE)
                            476 	.area XINIT   (CODE)
                            477 	.area CABS    (ABS,CODE)
